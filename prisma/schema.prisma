// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model PollQuestion {
  id          String    @id @default(cuid())
  question    String    @db.VarChar(5000)
  description String    @default("") @db.VarChar(5000)
  endsAt      DateTime?
  options     Json
  ownerToken  String?   @db.VarChar(255)
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  Vote        Vote[]

  @@index([ownerToken, userId])
}

model Vote {
  id         String       @id @default(cuid())
  pollId     String
  poll       PollQuestion @relation(fields: [pollId], references: [id], onDelete: Cascade)
  choice     Int
  voterToken String?      @db.VarChar(255)
  userId     String?
  user       User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())

  @@index([voterToken, userId, pollId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  PollQuestion  PollQuestion[]
  Vote          Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
